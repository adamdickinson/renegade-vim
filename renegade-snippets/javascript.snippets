# React
snippet rfc "React Functional Component" b
import React from "react"
import PropTypes from "prop-types"
import "./style.sass"



export const ${1:`!v expand('%:p:h:t')`} = props => (

)



$1.propTypes = {
  children: PropTypes.node
}



$1.displayName = "$1"



export default $1
endsnippet



# React
snippet crfc "Connected React Functional Component" b
import React from "react"
import PropTypes from "prop-types"
import { connect } from "react-redux"
import "./style.sass"



export const ${1:`!v expand('%:p:h:t')`} = props => (

)



$1.propTypes = {
  children: PropTypes.node
}



$1.displayName = "$1"



const mapDispatchToProps = dispatch => {
  return {
  }
}



const mapStateToProps = state => {
  return {
  }
}



export default connect(mapStateToProps, mapDispatchToProps)($1)
endsnippet



snippet rss "React Storybook Story" b
import React from "react"
import { storiesOf } from "@storybook/react"
import { action } from "@storybook/addon-actions"

import ${1:`!v expand('%:p:h:t')`} from "./"



const actions = {
}



storiesOf("$1", module)
  .add("default", () => <$1 {...actions}></$1>)
endsnippet

snippet rct "React Component Test" b
import React from "react"
import ${1:`!v expand('%:p:h:t')`} from "./"



describe("$1 component", () => {

  it("should render", () =>
    expect(shallow(<$1 />))
      .toMatchSnapshot()
  )



  it("should run actions", () => {
    const actions = {
      onRunActions: jest.fn()
    }

    const component = shallow(<$1 {...actions} />)

    view.find("a").prop("onClick")()
    expect(actions.onRunActions).toBeCalledWith()
  })

})
endsnippet



snippet crct "Connected React Component Test" b
import React from "react"
import ReduxThunk from "redux-thunk"
import configureStore from "redux-mock-store"

import { ${1:`!v expand('%:p:h:t')`}, mapDispatchToProps, mapStateToProps } from "./"



describe("$1 component", () => {

  const mockStore = configureStore([ ReduxThunk ])



  it("should render", () =>
    expect(shallow(<$1 />))
      .toMatchSnapshot()
  )



  it("should run actions", () => {
    const actions = {
      onRunActions: jest.fn()
    }

    const component = shallow(<$1 {...actions} />)

    view.find("a").prop("onClick")()
    expect(actions.onRunActions).toBeCalledWith()
  })



  it("should map state to props", () => {
    const props = mapStateToProps({})
		expect(props).toMatchSnapshot()
  })



  it("should map actions to props", async () => {
    const store = mockStore()
    const props = mapDispatchToProps(store.dispatch)
    const actionsOf = test.actionsOf(store)

    await actionsOf(() => props.runAction()).then(actions =>
      expect(actions).toMatchSnapshot("$1 component should map runAction to props"))
  })

})
endsnippet



snippet rat "Redux Action Test" b
it("creates $1 action", () =>
  expect( actions.$2() )
    .toEqual({ type: types.$1 })
)
endsnippet
